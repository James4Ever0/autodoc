{
    "summary": "This code initializes Autodoc, prompts for repository details and LLMs selection, creates a configuration file, and displays a success message.",
    "details": [
        {
            "comment": "The code snippet is a function that creates a template for AutodocRepoConfig. It takes an optional configuration object as input and returns a new configuration object with default values if the input is not provided. The function sets properties such as name, repositoryUrl, root, output, llms, priority, maxConcurrentCalls, addQuestions, ignore, and filePrompt based on the input configuration or default values. This template can be used to initialize an AutodocRepoConfig for further processing.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/init/index.ts\":0-38",
            "content": "import chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { AutodocRepoConfig, LLMModels, Priority } from '../../../types.js';\nexport const makeConfigTemplate = (\n  config?: AutodocRepoConfig,\n): AutodocRepoConfig => {\n  return {\n    name: config?.name ?? '',\n    repositoryUrl: config?.repositoryUrl ?? '',\n    root: '.',\n    output: './.autodoc',\n    llms:\n      config?.llms?.length ?? 0 > 0\n        ? (config as AutodocRepoConfig).llms\n        : [LLMModels.GPT3],\n    priority: Priority.COST,\n    maxConcurrentCalls: 25,\n    addQuestions: true,\n    ignore: [\n      '.*',\n      '*package-lock.json',\n      '*package.json',\n      'node_modules',\n      '*dist*',\n      '*build*',\n      '*test*',\n      '*.svg',\n      '*.md',\n      '*.mdx',\n      '*.toml',\n      '*autodoc*',\n    ],\n    filePrompt:\n      config?.filePrompt ??\n      'Write a detailed technical explanation of what this code does. \\n\\\n      Focus on the high-level purpose of the code and how it may be used in the larger project.\\n\\"
        },
        {
            "comment": "This code is defining variables and functions for the `init` command in a CLI tool. It takes a `config` object as input, which includes options such as folderPrompt, chatPrompt, contentType, targetAudience, and linkHosted. The function returns an async function that can be used to initialize the project with the provided configuration.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/init/index.ts\":39-60",
            "content": "      Include code examples where appropriate. Keep you response between 100 and 300 words. \\n\\\n      DO NOT RETURN MORE THAN 300 WORDS.\\n\\\n      Output should be in markdown format.\\n\\\n      Do not just list the methods and classes in this file.',\n    folderPrompt:\n      config?.folderPrompt ??\n      'Write a technical explanation of what the code in this folder does\\n\\\n      and how it might fit into the larger project or work with other parts of the project.\\n\\\n      Give examples of how this code might be used. Include code examples where appropriate.\\n\\\n      Be concise. Include any information that may be relevant to a developer who is curious about this code.\\n\\\n      Keep you response under 400 words. Output should be in markdown format.\\n\\\n      Do not just list the files and folders in this folder.',\n    chatPrompt: '',\n    contentType: 'code',\n    targetAudience: 'smart developer',\n    linkHosted: false,\n  };\n};\nexport const init = async (\n  config: AutodocRepoConfig = makeConfigTemplate(),\n) => {"
        },
        {
            "comment": "The code is checking if the 'autodoc.config.json' file already exists in the specified location. If it does, it prompts a confirmation to overwrite the existing configuration before proceeding. The code then proceeds to ask for user input for repository name, GitHub URL, and LLMs selection.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/init/index.ts\":61-99",
            "content": "  const configPath = path.join(config.root, 'autodoc.config.json');\n  if (fs.existsSync(configPath)) {\n    const questions = [\n      {\n        type: 'confirm',\n        name: 'continue',\n        message:\n          'An autodoc.config.json file already exists in this location. The existing configuration will be overwritten. Do you want to continue? ',\n        default: false,\n      },\n    ];\n    const answers = await inquirer.prompt(questions);\n    if (!answers.continue) {\n      process.exit(0);\n    }\n  }\n  const questions = [\n    {\n      type: 'input',\n      name: 'name',\n      message: chalk.yellow(`Enter the name of your repository:`),\n      default: config.name,\n    },\n    {\n      type: 'input',\n      name: 'repositoryUrl',\n      message: chalk.yellow(`Enter the GitHub URL of your repository:`),\n      default: config.repositoryUrl,\n    },\n    {\n      type: 'list',\n      name: 'llms',\n      message: chalk.yellow(\n        `Select which LLMs you have access to (use GPT-3.5 Turbo if you aren't sure):`,\n      ),\n      default: 0,"
        },
        {
            "comment": "This code snippet is for a CLI command, specifically for initializing something. It asks the user to choose from different language models (GPT-3.5 Turbo, GPT-4 8K, and GPT-4 32K) and prompts them to enter file-level and folder-level documentation prompts. The user's choices are stored in the variables `name`, `repositoryUrl`, `llms`, `filePrompt`, and `folderPrompt`. The `makeConfigTemplate` function is then called with these variables as arguments.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/init/index.ts\":100-138",
            "content": "      choices: [\n        {\n          name: 'GPT-3.5 Turbo',\n          value: [LLMModels.GPT3],\n        },\n        {\n          name: 'GPT-3.5 Turbo, GPT-4 8K (Early Access)',\n          value: [LLMModels.GPT3, LLMModels.GPT4],\n        },\n        {\n          name: 'GPT-3.5 Turbo, GPT-4 8K (Early Access), GPT-4 32K (Early Access)',\n          value: [LLMModels.GPT3, LLMModels.GPT4, LLMModels.GPT432k],\n        },\n      ],\n    },\n    {\n      type: 'input',\n      name: 'filePrompt',\n      message: chalk.yellow(\n        `Enter the prompt you want to use for generating file-level documentation:`,\n      ),\n      default: config.filePrompt,\n    },\n    {\n      type: 'input',\n      name: 'folderPrompt',\n      message: chalk.yellow(\n        `Enter the prompt you want to use for generating folder-level documentation:`,\n      ),\n      default: config.folderPrompt,\n    },\n  ];\n  const { name, repositoryUrl, llms, filePrompt, folderPrompt } =\n    await inquirer.prompt(questions);\n  const newConfig = makeConfigTemplate({\n    ...config,\n    name,"
        },
        {
            "comment": "This code initializes Autodoc, writes the configuration to a file and displays a success message.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/init/index.ts\":139-154",
            "content": "    repositoryUrl,\n    llms,\n    filePrompt,\n    folderPrompt,\n  });\n  fs.writeFileSync(\n    path.join(newConfig.root, 'autodoc.config.json'),\n    JSON.stringify(newConfig, null, 2),\n    'utf-8',\n  );\n  console.log(\n    chalk.green('Autodoc initialized. Run `doc index` to get started.'),\n  );\n};"
        }
    ]
}