{
    "summary": "The code contains three exported functions. The first function, `getFileName`, takes a string as input, along with optional delimiter and extension arguments, and returns the filename by finding the last occurrence of the delimiter in the input string and appending the extension if no delimiter is found. The second and third functions, `githubFileUrl` and `githubFolderUrl`, both take githubRoot, inputRoot, filePath or folderPath, and a linkHosted boolean as arguments. They return github URLs for either files or folders, depending on the linkHosted value.",
    "details": [
        {
            "comment": "The code contains three exported functions. The first function, `getFileName`, takes a string as input, along with optional delimiter and extension arguments, and returns the filename by finding the last occurrence of the delimiter in the input string and appending the extension if no delimiter is found. The second and third functions, `githubFileUrl` and `githubFolderUrl`, both take githubRoot, inputRoot, filePath or folderPath, and a linkHosted boolean as arguments. They return github URLs for either files or folders, depending on the linkHosted value.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/utils/FileUtil.ts\":0-42",
            "content": "export function getFileName(\n  input: string,\n  delimiter = '.',\n  extension = '.md',\n): string {\n  const lastDelimiterIndex = input.lastIndexOf(delimiter);\n  if (lastDelimiterIndex === -1) {\n    // delimiter not found in string\n    return input + extension;\n  } else {\n    return input.slice(0, lastDelimiterIndex) + extension;\n  }\n}\nexport const githubFileUrl = (\n  githubRoot: string,\n  inputRoot: string,\n  filePath: string,\n  linkHosted: boolean,\n): string => {\n  if (linkHosted) {\n    return `${githubRoot}/${filePath.substring(inputRoot.length - 1)}`;\n  } else {\n    return `${githubRoot}/blob/master/${filePath.substring(\n      inputRoot.length - 1,\n    )}`;\n  }\n};\nexport const githubFolderUrl = (\n  githubRoot: string,\n  inputRoot: string,\n  folderPath: string,\n  linkHosted: boolean,\n): string => {\n  if (linkHosted) {\n    return `${githubRoot}/${folderPath.substring(inputRoot.length - 1)}`;\n  } else {\n    return `${githubRoot}/tree/master/${folderPath.substring(\n      inputRoot.length - 1,\n    )}`;\n  }\n};"
        }
    ]
}