{
    "summary": "This code processes repositories and projects, generating prompts and summaries using LLMs, handling indexing, folders, checksums, markdown files, and user inputs. It does not support estimation for folders.",
    "details": [
        {
            "comment": "This code is responsible for processing a repository by traversing its file system, generating prompts based on the files and folders it contains, and using LLMs (Language Learning Models) to generate summaries. It takes inputs such as project name, repository URL, input root directory, output directory, list of available LLMs, priority level, and maximum concurrent calls. The code imports necessary dependencies, including file system access, path manipulation, MD5 hashing, and several utility functions from other files in the codebase.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":0-42",
            "content": "import fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { Md5 } from 'ts-md5';\nimport { OpenAIChat } from 'langchain/llms';\nimport { encoding_for_model } from '@dqbd/tiktoken';\nimport { APIRateLimit } from '../../utils/APIRateLimit.js';\nimport {\n  createCodeFileSummary,\n  createCodeQuestions,\n  folderSummaryPrompt,\n} from './prompts.js';\nimport {\n  AutodocRepoConfig,\n  FileSummary,\n  FolderSummary,\n  LLMModelDetails,\n  LLMModels,\n  ProcessFile,\n  ProcessFolder,\n} from '../../../types.js';\nimport { traverseFileSystem } from '../../utils/traverseFileSystem.js';\nimport {\n  spinnerSuccess,\n  stopSpinner,\n  updateSpinnerText,\n} from '../../spinner.js';\nimport {\n  getFileName,\n  githubFileUrl,\n  githubFolderUrl,\n} from '../../utils/FileUtil.js';\nimport { models } from '../../utils/LLMUtil.js';\nimport { selectModel } from './selectModel.js';\nexport const processRepository = async (\n  {\n    name: projectName,\n    repositoryUrl,\n    root: inputRoot,\n    output: outputRoot,\n    llms,\n    priority,\n    maxConcurrentCalls,"
        },
        {
            "comment": "This function processes a file, calculates its checksum, and decides if a reindex is needed based on the existing .json file. It takes parameters such as fileName, filePath, projectName, contentType, filePrompt, targetAudience, and linkHosted. The function reads the file content, calculates the new checksum using calculateChecksum function, and then checks if an existing .json file needs a reindex using shouldReindex function.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":43-86",
            "content": "    addQuestions,\n    ignore,\n    filePrompt,\n    folderPrompt,\n    contentType,\n    targetAudience,\n    linkHosted,\n  }: AutodocRepoConfig,\n  dryRun?: boolean,\n) => {\n  const rateLimit = new APIRateLimit(maxConcurrentCalls);\n  const callLLM = async (\n    prompt: string,\n    model: OpenAIChat,\n  ): Promise<string> => {\n    return rateLimit.callApi(() => model.call(prompt));\n  };\n  const isModel = (model: LLMModelDetails | null): model is LLMModelDetails =>\n    model !== null;\n  const processFile: ProcessFile = async ({\n    fileName,\n    filePath,\n    projectName,\n    contentType,\n    filePrompt,\n    targetAudience,\n    linkHosted,\n  }): Promise<void> => {\n    const content = await fs.readFile(filePath, 'utf-8');\n    /**\n     * Calculate the checksum of the file content\n     */\n    const newChecksum = await calculateChecksum([content]);\n    /**\n     * if an existing .json file exists,\n     * it will check the checksums and decide if a reindex is needed\n     */\n    const reindex = await shouldReindex(\n      path.join(outputRoot, filePath.substring(0, filePath.lastIndexOf('\\\\'))),"
        },
        {
            "comment": "Updates file name extension, checks if reindexing is needed, retrieves the markdown file path and URL, creates summary and questions prompts, selects a model based on prompts and available LLMs/models, checks if model is valid, encodes the summary and question lengths, attempts to perform the operation (if not in dry run mode).",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":87-128",
            "content": "      fileName.replace(/\\.[^/.]+$/, '.json'),\n      newChecksum,\n    );\n    if (!reindex) {\n      return;\n    }\n    const markdownFilePath = path.join(outputRoot, filePath);\n    const url = githubFileUrl(repositoryUrl, inputRoot, filePath, linkHosted);\n    const summaryPrompt = createCodeFileSummary(\n      projectName,\n      projectName,\n      content,\n      contentType,\n      filePrompt,\n    );\n    const questionsPrompt = createCodeQuestions(\n      projectName,\n      projectName,\n      content,\n      contentType,\n      targetAudience,\n    );\n    const prompts = addQuestions\n      ? [summaryPrompt, questionsPrompt]\n      : [summaryPrompt];\n    const model = selectModel(prompts, llms, models, priority);\n    if (!isModel(model)) {\n      // console.log(`Skipped ${filePath} | Length ${max}`);\n      return;\n    }\n    const encoding = encoding_for_model(model.name);\n    const summaryLength = encoding.encode(summaryPrompt).length;\n    const questionLength = encoding.encode(questionsPrompt).length;\n    try {\n      if (!dryRun) {"
        },
        {
            "comment": "The code snippet performs the following actions:\n1. Calls an LLM (Large Language Model) asynchronously for a prompt and stores the result in 'response'.\n2. Creates a file object containing file details like fileName, filePath, url, summary from response, questions (if specified), and checksum.\n3. Determines the output path for the JSON file.\n4. Creates the directory if it does not exist.\n5. Writes the content (file summary in JSON format) to the file at the specified output path.\n6. Catches any errors that may occur during file creation or writing and logs them.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":129-166",
            "content": "        /** Call LLM */\n        const response = await Promise.all(\n          prompts.map(async (prompt) => callLLM(prompt, model.llm)),\n        );\n        /**\n         * Create file and save to disk\n         */\n        const file: FileSummary = {\n          fileName,\n          filePath,\n          url,\n          summary: response[0],\n          questions: addQuestions ? response[1] : '',\n          checksum: newChecksum,\n        };\n        const outputPath = getFileName(markdownFilePath, '.', '.json');\n        const content =\n          file.summary.length > 0 ? JSON.stringify(file, null, 2) : '';\n        /**\n         * Create the output directory if it doesn't exist\n         */\n        try {\n          await fs.mkdir(markdownFilePath.replace(fileName, ''), {\n            recursive: true,\n          });\n          await fs.writeFile(outputPath, content, 'utf-8');\n        } catch (error) {\n          console.error(error);\n          return;\n        }\n        // console.log(`File: ${fileName} => ${outputPath}`);\n      }\n      /**"
        },
        {
            "comment": "This code snippet handles the process of indexing and checking folders in a project. It checks if the folder is ignored or not, calculates the checksum of the folder contents, and decides whether a reindex is needed based on the existing summary.json file. If a reindex is required, it will increment various model parameters to track usage and provide a summary at the end. However, currently, folders are not supported during estimation, indicated by a TODO note.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":167-208",
            "content": "       * Track usage for end of run summary\n       */\n      model.inputTokens += summaryLength;\n      if (addQuestions) model.inputTokens += questionLength;\n      model.total++;\n      model.outputTokens += 1000;\n      model.succeeded++;\n    } catch (e) {\n      console.log(e);\n      console.error(`Failed to get summary for file ${fileName}`);\n      model.failed++;\n    }\n  };\n  const processFolder: ProcessFolder = async ({\n    folderName,\n    folderPath,\n    projectName,\n    contentType,\n    folderPrompt,\n    shouldIgnore,\n    linkHosted,\n  }): Promise<void> => {\n    /**\n     * For now we don't care about folders\n     *\n     * TODO: Add support for folders during estimation\n     */\n    if (dryRun) return;\n    const contents = (await fs.readdir(folderPath)).filter(\n      (fileName) => !shouldIgnore(fileName),\n    );\n    /**\n     * Get the checksum of the folder\n     */\n    const newChecksum = await calculateChecksum(contents);\n    /**\n     * If an existing summary.json file exists,\n     * it will check the checksums and decide if a reindex is needed"
        },
        {
            "comment": "Checks if the summary.json file requires reindexing, generates the folder URL, and retrieves all files and folders within the specified folder using promises.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":209-246",
            "content": "     */\n    const reindex = await shouldReindex(\n      folderPath,\n      'summary.json',\n      newChecksum,\n    );\n    if (!reindex) {\n      return;\n    }\n    // eslint-disable-next-line prettier/prettier\n    const url = githubFolderUrl(\n      repositoryUrl,\n      inputRoot,\n      folderPath,\n      linkHosted,\n    );\n    const allFiles: (FileSummary | null)[] = await Promise.all(\n      contents.map(async (fileName) => {\n        const entryPath = path.join(folderPath, fileName);\n        const entryStats = await fs.stat(entryPath);\n        if (entryStats.isFile() && fileName !== 'summary.json') {\n          const file = await fs.readFile(entryPath, 'utf8');\n          return file.length > 0 ? JSON.parse(file) : null;\n        }\n        return null;\n      }),\n    );\n    try {\n      const files = allFiles.filter(\n        (file): file is FileSummary => file !== null,\n      );\n      const allFolders: (FolderSummary | null)[] = await Promise.all(\n        contents.map(async (fileName) => {\n          const entryPath = path.join(folderPath, fileName);"
        },
        {
            "comment": "This code checks if the given entry is a directory, reads the 'summary.json' file within the directory if it exists, and returns the parsed JSON data. If the entry is not a directory or the file does not exist, it logs a \"Skipped\" message and returns null. The code then filters out any null values from the results, generates a folder summary prompt, selects a model to generate a summary using llms and models, and calls the LLM function with the prompt.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":247-286",
            "content": "          const entryStats = await fs.stat(entryPath);\n          if (entryStats.isDirectory()) {\n            try {\n              const summaryFilePath = path.resolve(entryPath, 'summary.json');\n              const file = await fs.readFile(summaryFilePath, 'utf8');\n              return JSON.parse(file);\n            } catch (e) {\n              console.log(`Skipped: ${folderPath}`);\n              return null;\n            }\n          }\n          return null;\n        }),\n      );\n      const folders = allFolders.filter(\n        (folder): folder is FolderSummary => folder !== null,\n      );\n      const summaryPrompt = folderSummaryPrompt(\n        folderPath,\n        projectName,\n        files,\n        folders,\n        contentType,\n        folderPrompt,\n      );\n      const model = selectModel([summaryPrompt], llms, models, priority);\n      if (!isModel(model)) {\n        // console.log(`Skipped ${filePath} | Length ${max}`);\n        return;\n      }\n      const summary = await callLLM(summaryPrompt, model.llm);\n      const folderSummary: FolderSummary = {"
        },
        {
            "comment": "Function takes folderName, folderPath, url, files, folders (filtered), summary, questions as inputs to create a folderSummary object. It writes the folderSummary as a JSON file in the specified folderPath. If there's an error, it logs the error and indicates failure for that specific folder path. Function gets the total number of files and folders in the project using traverseFileSystem.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":287-334",
            "content": "        folderName,\n        folderPath,\n        url,\n        files,\n        folders: folders.filter(Boolean),\n        summary,\n        questions: '',\n        checksum: newChecksum,\n      };\n      const outputPath = path.join(folderPath, 'summary.json');\n      await fs.writeFile(\n        outputPath,\n        JSON.stringify(folderSummary, null, 2),\n        'utf-8',\n      );\n      // console.log(`Folder: ${folderName} => ${outputPath}`);\n    } catch (e) {\n      console.log(e);\n      console.log(`Failed to get summary for folder: ${folderPath}`);\n    }\n  };\n  /**\n   * Get the number of files and folders in the project\n   */\n  const filesAndFolders = async (): Promise<{\n    files: number;\n    folders: number;\n  }> => {\n    let files = 0;\n    let folders = 0;\n    await Promise.all([\n      traverseFileSystem({\n        inputPath: inputRoot,\n        projectName,\n        processFile: () => {\n          files++;\n          return Promise.resolve();\n        },\n        ignore,\n        filePrompt,\n        folderPrompt,\n        contentType,\n        targetAudience,"
        },
        {
            "comment": "This code processes both files and folders in a given project directory. It first counts the number of files and folders, then creates markdown files for each code file and summaries for each folder. The progress is displayed using a spinner.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":335-386",
            "content": "        linkHosted,\n      }),\n      traverseFileSystem({\n        inputPath: inputRoot,\n        projectName,\n        processFolder: () => {\n          folders++;\n          return Promise.resolve();\n        },\n        ignore,\n        filePrompt,\n        folderPrompt,\n        contentType,\n        targetAudience,\n        linkHosted,\n      }),\n    ]);\n    return {\n      files,\n      folders,\n    };\n  };\n  const { files, folders } = await filesAndFolders();\n  /**\n   * Create markdown files for each code file in the project\n   */\n  updateSpinnerText(`Processing ${files} files...`);\n  await traverseFileSystem({\n    inputPath: inputRoot,\n    projectName,\n    processFile,\n    ignore,\n    filePrompt,\n    folderPrompt,\n    contentType,\n    targetAudience,\n    linkHosted,\n  });\n  spinnerSuccess(`Processing ${files} files...`);\n  /**\n   * Create markdown summaries for each folder in the project\n   */\n  updateSpinnerText(`Processing ${folders} folders... `);\n  await traverseFileSystem({\n    inputPath: outputRoot,\n    projectName,\n    processFolder,"
        },
        {
            "comment": "This code chunk is responsible for processing multiple folders, calculating the checksums of files within them, and determining whether to re-index a summary.json file based on the new checksum. It handles user inputs such as ignore, filePrompt, folderPrompt, contentType, targetAudience, and linkHosted. The calculateChecksum function generates the final checksum by joining and hashing all individual file checksums. The shouldReindex function checks if a summary.json file exists and compares its checksum with the new one to decide whether re-indexing is required.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":387-434",
            "content": "    ignore,\n    filePrompt,\n    folderPrompt,\n    contentType,\n    targetAudience,\n    linkHosted,\n  });\n  spinnerSuccess(`Processing ${folders} folders... `);\n  stopSpinner();\n  /**\n   * Print results\n   */\n  return models;\n};\n/**\n * Calculates the checksum of all the files in a folder\n */\nasync function calculateChecksum(contents: string[]): Promise<string> {\n  const checksums: string[] = [];\n  for (const content of contents) {\n    const checksum = Md5.hashStr(content);\n    checksums.push(checksum);\n  }\n  const concatenatedChecksum = checksums.join('');\n  const finalChecksum = Md5.hashStr(concatenatedChecksum);\n  return finalChecksum;\n}\n/**\n * Checks if a summary.json file exists.\n * If it does, compares the checksums to see if it\n * needs to be re-indexed or not.\n */\nasync function shouldReindex(\n  contentPath: string,\n  name: string,\n  newChecksum: string,\n): Promise<boolean> {\n  const jsonPath = path.join(contentPath, name);\n  let summaryExists = false;\n  try {\n    await fs.access(jsonPath);\n    summaryExists = true;\n  } catch (error) {}"
        },
        {
            "comment": "This code checks if a summary file exists and reads its contents. If the checksum is the same as the new one, it skips the indexing process and returns false. Otherwise, if the checksum is different, it proceeds with reindexing and returns true. If no summary file exists, it generates one and returns true.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/cli/commands/index/processRepository.ts\":436-452",
            "content": "  if (summaryExists) {\n    const fileContents = await fs.readFile(jsonPath, 'utf8');\n    const fileContentsJSON = JSON.parse(fileContents);\n    const oldChecksum = fileContentsJSON.checksum;\n    if (oldChecksum === newChecksum) {\n      console.log(`Skipping ${jsonPath} because it has not changed`);\n      return false;\n    } else {\n      console.log(`Reindexing ${jsonPath} because it has changed`);\n      return true;\n    }\n  }\n  //if no summary then generate one\n  return true;\n}"
        }
    ]
}