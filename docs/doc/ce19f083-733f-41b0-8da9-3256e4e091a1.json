{
    "summary": "The code initializes the Autodoc CLI Tool with \"estimate\" and \"index\" commands, reads config file, handles errors, and requires fs, chalk, and program libraries.",
    "details": [
        {
            "comment": "Initializing repository by creating a 'autodoc.config.json' file in the current directory. If it already exists, use the config to initiate the Autodoc CLI Tool.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/index.ts\":0-30",
            "content": "#!/usr/bin/env node\nimport fs from 'node:fs/promises';\nimport { Command } from 'commander';\nimport { spinnerError, stopSpinner } from './cli/spinner.js';\nimport { init } from './cli/commands/init/index.js';\nimport { estimate } from './cli/commands/estimate/index.js';\nimport { index } from './cli/commands/index/index.js';\nimport { query } from './cli/commands/query/index.js';\nimport { AutodocRepoConfig, AutodocUserConfig } from './types.js';\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { user } from './cli/commands/user/index.js';\nimport { userConfigFilePath } from './const.js';\nconst program = new Command();\nprogram.description('Autodoc CLI Tool');\nprogram.version('0.0.9');\nprogram\n  .command('init')\n  .description(\n    'Initialize repository by creating a `autodoc.config.json` file in the current directory.',\n  )\n  .action(async () => {\n    try {\n      const config: AutodocRepoConfig = JSON.parse(\n        await fs.readFile('./autodoc.config.json', 'utf8'),\n      );\n      init(config);\n    } catch (e) {"
        },
        {
            "comment": "This code sets up command-line interface (CLI) commands for \"estimate\" and \"index\". The \"estimate\" command reads the config file, then calls the \"estimate\" function. If it can't find the config file, it displays an error message and exits. The \"index\" command also reads the config file, then prompts the user to confirm indexing. After confirmation, it executes the main indexing functionality.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/index.ts\":31-75",
            "content": "      init();\n    }\n  });\nprogram\n  .command('estimate')\n  .description('Estimate the cost of running `index` on your respository.')\n  .action(async () => {\n    try {\n      const config: AutodocRepoConfig = JSON.parse(\n        await fs.readFile('./autodoc.config.json', 'utf8'),\n      );\n      estimate(config);\n    } catch (e) {\n      console.error(\n        'Failed to find `autodoc.config.json` file. Did you run `doc init`?',\n      );\n      console.error(e);\n      process.exit(1);\n    }\n  });\nprogram\n  .command('index')\n  .description(\n    'Traverse your codebase, write docs via LLM, and create a locally stored index.',\n  )\n  .action(async () => {\n    try {\n      const config: AutodocRepoConfig = JSON.parse(\n        await fs.readFile('./autodoc.config.json', 'utf8'),\n      );\n      await estimate(config);\n      const questions = [\n        {\n          type: 'confirm',\n          name: 'continue',\n          message: 'Do you want to continue with indexing?',\n          default: true,\n        },\n      ];\n      const answers = await inquirer.prompt(questions);"
        },
        {
            "comment": "This code is implementing a command-line application with options for setting the user config, querying an Autodoc index, and running a crawl. It requires a valid `autodoc.config.json` file. If the file is missing, it displays error messages and exits with appropriate codes. The code uses `fs`, `chalk`, and `program` libraries for file handling, logging, and command parsing respectively.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/index.ts\":77-120",
            "content": "      if (answers.continue) {\n        console.log(chalk.green('Starting crawl...'));\n        index(config);\n      } else {\n        console.log('Exiting...');\n        process.exit(0);\n      }\n    } catch (e) {\n      console.error(\n        'Failed to find `autodoc.config.json` file. Did you run `doc init`?',\n      );\n      console.error(e);\n      process.exit(1);\n    }\n  });\nprogram\n  .command('user')\n  .description('Set the Autodoc user config')\n  .action(async () => {\n    try {\n      const config: AutodocUserConfig = JSON.parse(\n        await fs.readFile(userConfigFilePath, 'utf8'),\n      );\n      user(config);\n    } catch (e) {\n      user();\n    }\n  });\nprogram\n  .command('q')\n  .description('Query an Autodoc index')\n  .action(async () => {\n    let repoConfig: AutodocRepoConfig;\n    try {\n      repoConfig = JSON.parse(\n        await fs.readFile('./autodoc.config.json', 'utf8'),\n      );\n    } catch (e) {\n      console.error(\n        'Failed to find `autodoc.config.json` file. Did you run `doc init`?',\n      );\n      console.error(e);"
        },
        {
            "comment": "This code handles the configuration file reading and exiting with error if failed. It also listens for unhandled promise rejections, displaying an error message and stopping the spinner before exiting with an error code 1.",
            "location": "\"/media/root/Prima/works/autodoc/docs/src/src/index.ts\":121-156",
            "content": "      process.exit(1);\n    }\n    try {\n      const userConfig: AutodocUserConfig = JSON.parse(\n        await fs.readFile(userConfigFilePath, 'utf8'),\n      );\n      query(repoConfig, userConfig);\n    } catch (e) {\n      try {\n        await user();\n        const userConfig: AutodocRepoConfig = JSON.parse(\n          await fs.readFile(userConfigFilePath, 'utf8'),\n        );\n        query(repoConfig, userConfig);\n      } catch (e) {\n        console.error('Failed to config file. Did you run `doc init`?');\n        console.error(e);\n        process.exit(1);\n      }\n    }\n  });\n/**\n * Listen for unhandled promise rejections\n */\nprocess.on('unhandledRejection', function (err: Error) {\n  console.error(err.stack);\n  spinnerError(); // show an error spinner\n  stopSpinner(); // stop the spinner\n  program.error('', { exitCode: 1 }); // exit with error code 1\n});\nprogram.parse();"
        }
    ]
}